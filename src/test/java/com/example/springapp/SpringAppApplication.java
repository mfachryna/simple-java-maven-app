package com.example.springapp;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.test.web.servlet.MockMvc;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

// @WebMvcTest annotation focuses only on Spring MVC components
// It starts a minimalistic Spring application context for web controllers
@WebMvcTest(SpringAppApplication.class) // Test only the SpringAppApplication controller
class SpringAppApplicationTests {

    @Autowired // Auto-injects MockMvc for testing web endpoints
    private MockMvc mockMvc;

    @Test
    void contextLoads() {
        // Simple test to ensure the Spring application context loads without errors
        // This is often a default test generated by Spring Initializr
    }

    @Test
    void helloEndpointReturnsCorrectMessage() throws Exception {
        // Performs a GET request to /hello and asserts the response status and content
        this.mockMvc.perform(get("/hello"))
            .andExpect(status().isOk()) // Expect HTTP 200 OK
            .andExpect(content().string("Hello from Spring Boot deployed by Jenkins!")); // Expect specific response body
    }

    @Test
    void rootEndpointReturnsCorrectMessage() throws Exception {
        // Performs a GET request to / and asserts the response status and content
        this.mockMvc.perform(get("/"))
            .andExpect(status().isOk()) // Expect HTTP 200 OK
            .andExpect(content().string("Welcome to Spring Boot App!")); // Expect specific response body
    }
}